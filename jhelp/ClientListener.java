/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jhelp;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.TextEvent;
import java.awt.event.TextListener;
import java.awt.event.WindowAdapter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import sun.awt.event.*;

/**
 * Class defines a process for all events what happen in client form.
 * @author <strong >Y.D.Zakovryashin</strong>, 2009
 * @version 1.0
 */
public class ClientListener extends WindowAdapter
        implements ActionListener, KeyListener, TextListener {

    private Client client;
    private JTextField textSerch;
    private JTextArea textArea;
    private JTextField id;

    /**
     * Single constructor of the class.
     * @param client references to client form
     */
    public ClientListener(Client client, JTextField textField, JTextArea textArea, JTextField id) {
        this.client = client;
        this.textSerch = textField;
        this.textArea = textArea;
        this.id = id;
    }
    

    /**
     * Method for processing of {@link java.awt.event.ActionEvent} events.
     * @param e reference to {@link java.awt.event.ActionEvent} event what happens
     * @see java.awt.event.ActionEvent
     * @see java.awt.event.ActionListener
     */
    @Override
    public void actionPerformed(ActionEvent event) {
        String code = textSerch.getText();
        Item[] values = new Item[1];
        //select data
        if (!textSerch.getText().isEmpty() && event.getActionCommand() == "SELECT")
            client.getData(new Data(new Item(code)));   
        //if insert item
        if(!textSerch.getText().isEmpty() && event.getActionCommand() == "INSERT" && !textArea.getText().isEmpty()){
            values[0] = new Item(textArea.getText());
            client.getData(new Data(JHelp.INSERT, new Item(code), values));
        }
        if(!textSerch.getText().isEmpty() && event.getActionCommand() == "UPDATE" && !textArea.getText().isEmpty()){
            values[0] = new Item(textArea.getText());
            client.getData(new Data(JHelp.UPDATE, new Item(code), values));
        }
        if(!textSerch.getText().isEmpty() && event.getActionCommand() == "DELETE" && !textArea.getText().isEmpty()){
            values[0] = new Item(Integer.valueOf(id.getText()) , textArea.getText(), JHelp.ORIGIN);
            client.getData(new Data(JHelp.DELETE, new Item(code), values));
        }
        if(event.getActionCommand() == "NEXT"){
            System.out.println("NEXT");
            client.switchNext();
        }
        if(event.getActionCommand() == "PREVIOS"){
            System.out.println("PREVIOS");
            client.switchPrevious();
        }
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event. The
     * method invokes in case a user pushes any keyboard button with typed symbol.
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyTyped(KeyEvent e) {
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event.
     * The method invokes in case a user pushes but not releases any keyboard
     * button.
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if(key == KeyEvent.VK_ENTER){
            String code = textSerch.getText();
            if (!textSerch.getText().isEmpty())
                client.getData(new Data(new Item(code))); 
        }
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event. The
     * method invokes in case a user releases any keyboard button.
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyReleased(KeyEvent e) {
    }

    /**
     * This method are invoked when an object's text changed. This high-level
     * event is generated by an object (such as a TextComponent) when its text
     * changes.
     * @param e reference to {@link java.awt.event.TextEvent} event what happens
     * @see java.awt.event.TextEvent
     * @see java.awt.event.TextListener
     */
    @Override
    public void textValueChanged(TextEvent e) {
    }
}